// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array memory;
    static Array freeList;  // 2048 ~ 16383

    static int LEN;         // segment[0] is length of segment,
    static int NXT;         // segment[1] is pointer to next segment.

    /** Initializes the class. */
    function void init() {
        let memory = 0;
        let freeList = 2048;

        let LEN = 0;
        let NXT = 1;

        let freeList[LEN] = 16383 - 2048 + 1;
        let freeList[NXT] = null;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Returns the segment whose length is closest to the requested length.
      * TODO: 실패 시 조각 모음 시도 */
    function int bestFit(int size) {
        var int address;
        var Array iter;

        let address = -1;
        let iter = freeList;
        while (~(iter = null)) {
            if (size < iter[LEN]) {
                if (address = -1) {
                    let address = iter;
                } else {
                    if (memory[address + LEN] > iter[LEN]) {
                        let address = iter;
                    }
                }
            }
            let iter = iter[NXT];
        }
        return address;
    }

    /** Update freeList. */
    function void update(int address, int size) {
        var Array before;
        var Array next;
        
        if ((memory[address + LEN] - (size + 1)) > 1) {
            let memory[address + LEN]  = memory[address + LEN] - (size + 1);
        } else {
            if ((memory[address + LEN] - (size + 1)) = 1) {
                let memory[address + LEN] = 1;
            }

            let before = freeList;
            let next = memory[address + NXT];

            if (before = address) {
                let freeList = next;
            } else {
                while (~(before[NXT] = address)) {
                    let before = before[NXT];
                }
                let before[NXT] = next;
            }
        }
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int address, block;
        
        // Find best-fit segment.
        let address = Memory.bestFit(size);
        if (address = -1) {
            return -1;
        }

        let block = address + (memory[address + LEN] - (size + 1));
        do Memory.update(address, size);
        let memory[block] = size + 1;

        return block + 1;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array next;

        let next = freeList;
        let freeList = o - 1;
        let freeList[NXT] = next;

        return;
    }
}
