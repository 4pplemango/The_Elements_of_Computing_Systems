// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array chars;
    field int maxLen, len;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
            let chars = Array.new(1);
            let maxLen = 0;
        } else {
            let chars = Array.new(maxLength);
            let maxLen = maxLength;
        }
        let len = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do chars.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return chars[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let chars[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (len < maxLen) {
            let chars[len] = c;
            let len = len + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (len > 0) {
            let len = len - 1;
        }
        return;
    }

    /** 48 <= ascii(c) <= 57 is digit. */
    function boolean isDigit(char c) {
        return (~(48 > c) & ~(c > 57));
    }

    /** Char to int. Char 'c' must be digit. */
    function int charToInt(char c) {
        return c - 48;
    }

    /** Int to char. Int 'i' must be between 0 and 9. */
    function char intToChar(int i) {
        return i + 48;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int result, idx;
        var boolean isNeg;

        let result = 0;
    
        // Check positive or negative.
        if ((len > 0) & (chars[0] = 45)) {
            let isNeg = true;
            let idx = 1;
        } else {
            let isNeg = false;
            let idx = 0;
        }

        while ((idx < len) & String.isDigit(chars[idx])) {
            let result = result * 10;
            let result = result + String.charToInt(chars[idx]);

            let idx = idx + 1;
        }

        if (isNeg) {
            return -result;
        } else {
            return result;
        }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let len = 0;
        
        if (val < 0) {
            do appendChar(45);
            let val = -val;
        }
        do setIntToString(val);

        return;
    }

    method void setIntToString(int val) {
        var int digit;

        if (val < 10) {
            do appendChar(String.intToChar(val));
            return;
        }
        let digit = val - ((val / 10) * 10);
        do setIntToString(val / 10);
        do appendChar(String.intToChar(digit));

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
