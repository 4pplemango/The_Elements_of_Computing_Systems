<class>
  <keyword> class </keyword>
  <identifier> PongGame </identifier>
  <Attribute> VarKind: class </Attribute>
  <symbol> { </symbol>
  <classVarDec>
    <keyword> static </keyword>
    <identifier> PongGame </identifier>
    <Attribute> VarKind: class </Attribute>
    <identifier> instance </identifier>
    <Attribute> VarKind: static, type: PongGame, index: 0 </Attribute>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <identifier> Bat </identifier>
    <Attribute> VarKind: class </Attribute>
    <identifier> bat </identifier>
    <Attribute> VarKind: field, type: Bat, index: 0 </Attribute>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <identifier> Ball </identifier>
    <Attribute> VarKind: class </Attribute>
    <identifier> ball </identifier>
    <Attribute> VarKind: field, type: Ball, index: 1 </Attribute>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier> wall </identifier>
    <Attribute> VarKind: field, type: int, index: 2 </Attribute>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> boolean </keyword>
    <identifier> exit </identifier>
    <Attribute> VarKind: field, type: boolean, index: 3 </Attribute>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier> score </identifier>
    <Attribute> VarKind: field, type: int, index: 4 </Attribute>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier> lastWall </identifier>
    <Attribute> VarKind: field, type: int, index: 5 </Attribute>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier> batWidth </identifier>
    <Attribute> VarKind: field, type: int, index: 6 </Attribute>
    <symbol> ; </symbol>
  </classVarDec>
  <subroutineDec>
    <keyword> constructor </keyword>
    <identifier> PongGame </identifier>
    <Attribute> VarKind: class </Attribute>
    <identifier> new </identifier>
    <Attribute> VarKind: subroutine </Attribute>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <Attribute> VarKind: class </Attribute>
          <symbol> . </symbol>
          <identifier> clearScreen </identifier>
          <Attribute> VarKind: subroutine </Attribute>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> batWidth </identifier>
          <Attribute> VarKind: field, type: int, index: 6 </Attribute>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 50 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> bat </identifier>
          <Attribute> VarKind: field, type: Bat, index: 0 </Attribute>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Bat </identifier>
              <Attribute> VarKind: class </Attribute>
              <symbol> . </symbol>
              <identifier> new </identifier>
              <Attribute> VarKind: subroutine </Attribute>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <integerConstant> 230 </integerConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <integerConstant> 229 </integerConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier> batWidth </identifier>
                    <Attribute> VarKind: field, type: int, index: 6 </Attribute>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <integerConstant> 7 </integerConstant>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> ball </identifier>
          <Attribute> VarKind: field, type: Ball, index: 1 </Attribute>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Ball </identifier>
              <Attribute> VarKind: class </Attribute>
              <symbol> . </symbol>
              <identifier> new </identifier>
              <Attribute> VarKind: subroutine </Attribute>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <integerConstant> 253 </integerConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <integerConstant> 222 </integerConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <integerConstant> 0 </integerConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <integerConstant> 511 </integerConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <integerConstant> 0 </integerConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <integerConstant> 229 </integerConstant>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> ball </identifier>
          <Attribute> VarKind: field, type: Ball, index: 1 </Attribute>
          <symbol> . </symbol>
          <identifier> setDestination </identifier>
          <Attribute> VarKind: subroutine </Attribute>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 400 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 0 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
          <Attribute> VarKind: class </Attribute>
          <symbol> . </symbol>
          <identifier> drawRectangle </identifier>
          <Attribute> VarKind: subroutine </Attribute>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 0 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 238 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 511 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 240 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Output </identifier>
          <Attribute> VarKind: class </Attribute>
          <symbol> . </symbol>
          <identifier> moveCursor </identifier>
          <Attribute> VarKind: subroutine </Attribute>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <integerConstant> 22 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <integerConstant> 0 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Output </identifier>
          <Attribute> VarKind: class </Attribute>
          <symbol> . </symbol>
          <identifier> printString </identifier>
          <Attribute> VarKind: subroutine </Attribute>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <stringConstant> "Score: 0" </stringConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> exit </identifier>
          <Attribute> VarKind: field, type: boolean, index: 3 </Attribute>
          <symbol> = </symbol>
          <expression>
            <term>
              <keyword> false </keyword>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> score </identifier>
          <Attribute> VarKind: field, type: int, index: 4 </Attribute>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> wall </identifier>
          <Attribute> VarKind: field, type: int, index: 2 </Attribute>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> lastWall </identifier>
          <Attribute> VarKind: field, type: int, index: 5 </Attribute>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <keyword> this </keyword>
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> dispose </identifier>
    <Attribute> VarKind: subroutine </Attribute>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier> bat </identifier>
          <Attribute> VarKind: field, type: Bat, index: 0 </Attribute>
          <symbol> . </symbol>
          <identifier> dispose </identifier>
          <Attribute> VarKind: subroutine </Attribute>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> ball </identifier>
          <Attribute> VarKind: field, type: Ball, index: 1 </Attribute>
          <symbol> . </symbol>
          <identifier> dispose </identifier>
          <Attribute> VarKind: subroutine </Attribute>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Memory </identifier>
          <Attribute> VarKind: class </Attribute>
          <symbol> . </symbol>
          <identifier> deAlloc </identifier>
          <Attribute> VarKind: subroutine </Attribute>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <keyword> this </keyword>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <keyword> void </keyword>
    <identifier> newInstance </identifier>
    <Attribute> VarKind: subroutine </Attribute>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier> instance </identifier>
          <Attribute> VarKind: static, type: PongGame, index: 0 </Attribute>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> PongGame </identifier>
              <Attribute> VarKind: class </Attribute>
              <symbol> . </symbol>
              <identifier> new </identifier>
              <Attribute> VarKind: subroutine </Attribute>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> function </keyword>
    <identifier> PongGame </identifier>
    <Attribute> VarKind: class </Attribute>
    <identifier> getInstance </identifier>
    <Attribute> VarKind: subroutine </Attribute>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <identifier> instance </identifier>
              <Attribute> VarKind: static, type: PongGame, index: 0 </Attribute>
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> run </identifier>
    <Attribute> VarKind: subroutine </Attribute>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> char </keyword>
        <identifier> key </identifier>
        <Attribute> VarKind: var, type: char, index: 0 </Attribute>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <whileStatement>
          <keyword> while </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <symbol> ~ </symbol>
              <term>
                <identifier> exit </identifier>
                <Attribute> VarKind: field, type: boolean, index: 3 </Attribute>
              </term>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <whileStatement>
              <keyword> while </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier> key </identifier>
                      <Attribute> VarKind: var, type: char, index: 0 </Attribute>
                    </term>
                    <symbol> = </symbol>
                    <term>
                      <integerConstant> 0 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
                <symbol> &amp; </symbol>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <symbol> ~ </symbol>
                      <term>
                        <identifier> exit </identifier>
                        <Attribute> VarKind: field, type: boolean, index: 3 </Attribute>
                      </term>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> key </identifier>
                  <Attribute> VarKind: var, type: char, index: 0 </Attribute>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <identifier> Keyboard </identifier>
                      <Attribute> VarKind: class </Attribute>
                      <symbol> . </symbol>
                      <identifier> keyPressed </identifier>
                      <Attribute> VarKind: subroutine </Attribute>
                      <symbol> ( </symbol>
                      <expressionList>
                      </expressionList>
                      <symbol> ) </symbol>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
                <doStatement>
                  <keyword> do </keyword>
                  <identifier> bat </identifier>
                  <Attribute> VarKind: field, type: Bat, index: 0 </Attribute>
                  <symbol> . </symbol>
                  <identifier> move </identifier>
                  <Attribute> VarKind: subroutine </Attribute>
                  <symbol> ( </symbol>
                  <expressionList>
                  </expressionList>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                  <keyword> do </keyword>
                  <identifier> moveBall </identifier>
                  <Attribute> VarKind: subroutine </Attribute>
                  <symbol> ( </symbol>
                  <expressionList>
                  </expressionList>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                  <keyword> do </keyword>
                  <identifier> Sys </identifier>
                  <Attribute> VarKind: class </Attribute>
                  <symbol> . </symbol>
                  <identifier> wait </identifier>
                  <Attribute> VarKind: subroutine </Attribute>
                  <symbol> ( </symbol>
                  <expressionList>
                    <expression>
                      <term>
                        <integerConstant> 50 </integerConstant>
                      </term>
                    </expression>
                  </expressionList>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                </doStatement>
              </statements>
              <symbol> } </symbol>
            </whileStatement>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> key </identifier>
                  <Attribute> VarKind: var, type: char, index: 0 </Attribute>
                </term>
                <symbol> = </symbol>
                <term>
                  <integerConstant> 130 </integerConstant>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <doStatement>
                  <keyword> do </keyword>
                  <identifier> bat </identifier>
                  <Attribute> VarKind: field, type: Bat, index: 0 </Attribute>
                  <symbol> . </symbol>
                  <identifier> setDirection </identifier>
                  <Attribute> VarKind: subroutine </Attribute>
                  <symbol> ( </symbol>
                  <expressionList>
                    <expression>
                      <term>
                        <integerConstant> 1 </integerConstant>
                      </term>
                    </expression>
                  </expressionList>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                </doStatement>
              </statements>
              <symbol> } </symbol>
              <keyword> else </keyword>
              <symbol> { </symbol>
              <statements>
                <ifStatement>
                  <keyword> if </keyword>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier> key </identifier>
                      <Attribute> VarKind: var, type: char, index: 0 </Attribute>
                    </term>
                    <symbol> = </symbol>
                    <term>
                      <integerConstant> 132 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                  <symbol> { </symbol>
                  <statements>
                    <doStatement>
                      <keyword> do </keyword>
                      <identifier> bat </identifier>
                      <Attribute> VarKind: field, type: Bat, index: 0 </Attribute>
                      <symbol> . </symbol>
                      <identifier> setDirection </identifier>
                      <Attribute> VarKind: subroutine </Attribute>
                      <symbol> ( </symbol>
                      <expressionList>
                        <expression>
                          <term>
                            <integerConstant> 2 </integerConstant>
                          </term>
                        </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                      <symbol> ; </symbol>
                    </doStatement>
                  </statements>
                  <symbol> } </symbol>
                  <keyword> else </keyword>
                  <symbol> { </symbol>
                  <statements>
                    <ifStatement>
                      <keyword> if </keyword>
                      <symbol> ( </symbol>
                      <expression>
                        <term>
                          <identifier> key </identifier>
                          <Attribute> VarKind: var, type: char, index: 0 </Attribute>
                        </term>
                        <symbol> = </symbol>
                        <term>
                          <integerConstant> 140 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ) </symbol>
                      <symbol> { </symbol>
                      <statements>
                        <letStatement>
                          <keyword> let </keyword>
                          <identifier> exit </identifier>
                          <Attribute> VarKind: field, type: boolean, index: 3 </Attribute>
                          <symbol> = </symbol>
                          <expression>
                            <term>
                              <keyword> true </keyword>
                            </term>
                          </expression>
                          <symbol> ; </symbol>
                        </letStatement>
                      </statements>
                      <symbol> } </symbol>
                    </ifStatement>
                  </statements>
                  <symbol> } </symbol>
                </ifStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
            <whileStatement>
              <keyword> while </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <symbol> ~ </symbol>
                      <term>
                        <symbol> ( </symbol>
                        <expression>
                          <term>
                            <identifier> key </identifier>
                            <Attribute> VarKind: var, type: char, index: 0 </Attribute>
                          </term>
                          <symbol> = </symbol>
                          <term>
                            <integerConstant> 0 </integerConstant>
                          </term>
                        </expression>
                        <symbol> ) </symbol>
                      </term>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
                <symbol> &amp; </symbol>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <symbol> ~ </symbol>
                      <term>
                        <identifier> exit </identifier>
                        <Attribute> VarKind: field, type: boolean, index: 3 </Attribute>
                      </term>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> key </identifier>
                  <Attribute> VarKind: var, type: char, index: 0 </Attribute>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <identifier> Keyboard </identifier>
                      <Attribute> VarKind: class </Attribute>
                      <symbol> . </symbol>
                      <identifier> keyPressed </identifier>
                      <Attribute> VarKind: subroutine </Attribute>
                      <symbol> ( </symbol>
                      <expressionList>
                      </expressionList>
                      <symbol> ) </symbol>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
                <doStatement>
                  <keyword> do </keyword>
                  <identifier> bat </identifier>
                  <Attribute> VarKind: field, type: Bat, index: 0 </Attribute>
                  <symbol> . </symbol>
                  <identifier> move </identifier>
                  <Attribute> VarKind: subroutine </Attribute>
                  <symbol> ( </symbol>
                  <expressionList>
                  </expressionList>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                  <keyword> do </keyword>
                  <identifier> moveBall </identifier>
                  <Attribute> VarKind: subroutine </Attribute>
                  <symbol> ( </symbol>
                  <expressionList>
                  </expressionList>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                </doStatement>
                <doStatement>
                  <keyword> do </keyword>
                  <identifier> Sys </identifier>
                  <Attribute> VarKind: class </Attribute>
                  <symbol> . </symbol>
                  <identifier> wait </identifier>
                  <Attribute> VarKind: subroutine </Attribute>
                  <symbol> ( </symbol>
                  <expressionList>
                    <expression>
                      <term>
                        <integerConstant> 50 </integerConstant>
                      </term>
                    </expression>
                  </expressionList>
                  <symbol> ) </symbol>
                  <symbol> ; </symbol>
                </doStatement>
              </statements>
              <symbol> } </symbol>
            </whileStatement>
          </statements>
          <symbol> } </symbol>
        </whileStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier> exit </identifier>
              <Attribute> VarKind: field, type: boolean, index: 3 </Attribute>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <identifier> Output </identifier>
              <Attribute> VarKind: class </Attribute>
              <symbol> . </symbol>
              <identifier> moveCursor </identifier>
              <Attribute> VarKind: subroutine </Attribute>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <integerConstant> 10 </integerConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <integerConstant> 27 </integerConstant>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier> Output </identifier>
              <Attribute> VarKind: class </Attribute>
              <symbol> . </symbol>
              <identifier> printString </identifier>
              <Attribute> VarKind: subroutine </Attribute>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <stringConstant> "Game Over" </stringConstant>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> moveBall </identifier>
    <Attribute> VarKind: subroutine </Attribute>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> bouncingDirection </identifier>
        <Attribute> VarKind: var, type: int, index: 0 </Attribute>
        <symbol> , </symbol>
        <identifier> batLeft </identifier>
        <Attribute> VarKind: var, type: int, index: 1 </Attribute>
        <symbol> , </symbol>
        <identifier> batRight </identifier>
        <Attribute> VarKind: var, type: int, index: 2 </Attribute>
        <symbol> , </symbol>
        <identifier> ballLeft </identifier>
        <Attribute> VarKind: var, type: int, index: 3 </Attribute>
        <symbol> , </symbol>
        <identifier> ballRight </identifier>
        <Attribute> VarKind: var, type: int, index: 4 </Attribute>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier> wall </identifier>
          <Attribute> VarKind: field, type: int, index: 2 </Attribute>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> ball </identifier>
              <Attribute> VarKind: field, type: Ball, index: 1 </Attribute>
              <symbol> . </symbol>
              <identifier> move </identifier>
              <Attribute> VarKind: subroutine </Attribute>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> wall </identifier>
                  <Attribute> VarKind: field, type: int, index: 2 </Attribute>
                </term>
                <symbol> &gt; </symbol>
                <term>
                  <integerConstant> 0 </integerConstant>
                </term>
              </expression>
              <symbol> ) </symbol>
            </term>
            <symbol> &amp; </symbol>
            <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <symbol> ~ </symbol>
                  <term>
                    <symbol> ( </symbol>
                    <expression>
                      <term>
                        <identifier> wall </identifier>
                        <Attribute> VarKind: field, type: int, index: 2 </Attribute>
                      </term>
                      <symbol> = </symbol>
                      <term>
                        <identifier> lastWall </identifier>
                        <Attribute> VarKind: field, type: int, index: 5 </Attribute>
                      </term>
                    </expression>
                    <symbol> ) </symbol>
                  </term>
                </term>
              </expression>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier> lastWall </identifier>
              <Attribute> VarKind: field, type: int, index: 5 </Attribute>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> wall </identifier>
                  <Attribute> VarKind: field, type: int, index: 2 </Attribute>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> bouncingDirection </identifier>
              <Attribute> VarKind: var, type: int, index: 0 </Attribute>
              <symbol> = </symbol>
              <expression>
                <term>
                  <integerConstant> 0 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> batLeft </identifier>
              <Attribute> VarKind: var, type: int, index: 1 </Attribute>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> bat </identifier>
                  <Attribute> VarKind: field, type: Bat, index: 0 </Attribute>
                  <symbol> . </symbol>
                  <identifier> getLeft </identifier>
                  <Attribute> VarKind: subroutine </Attribute>
                  <symbol> ( </symbol>
                  <expressionList>
                  </expressionList>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> batRight </identifier>
              <Attribute> VarKind: var, type: int, index: 2 </Attribute>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> bat </identifier>
                  <Attribute> VarKind: field, type: Bat, index: 0 </Attribute>
                  <symbol> . </symbol>
                  <identifier> getRight </identifier>
                  <Attribute> VarKind: subroutine </Attribute>
                  <symbol> ( </symbol>
                  <expressionList>
                  </expressionList>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> ballLeft </identifier>
              <Attribute> VarKind: var, type: int, index: 3 </Attribute>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> ball </identifier>
                  <Attribute> VarKind: field, type: Ball, index: 1 </Attribute>
                  <symbol> . </symbol>
                  <identifier> getLeft </identifier>
                  <Attribute> VarKind: subroutine </Attribute>
                  <symbol> ( </symbol>
                  <expressionList>
                  </expressionList>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> ballRight </identifier>
              <Attribute> VarKind: var, type: int, index: 4 </Attribute>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> ball </identifier>
                  <Attribute> VarKind: field, type: Ball, index: 1 </Attribute>
                  <symbol> . </symbol>
                  <identifier> getRight </identifier>
                  <Attribute> VarKind: subroutine </Attribute>
                  <symbol> ( </symbol>
                  <expressionList>
                  </expressionList>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> wall </identifier>
                  <Attribute> VarKind: field, type: int, index: 2 </Attribute>
                </term>
                <symbol> = </symbol>
                <term>
                  <integerConstant> 4 </integerConstant>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> exit </identifier>
                  <Attribute> VarKind: field, type: boolean, index: 3 </Attribute>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <symbol> ( </symbol>
                      <expression>
                        <term>
                          <identifier> batLeft </identifier>
                          <Attribute> VarKind: var, type: int, index: 1 </Attribute>
                        </term>
                        <symbol> &gt; </symbol>
                        <term>
                          <identifier> ballRight </identifier>
                          <Attribute> VarKind: var, type: int, index: 4 </Attribute>
                        </term>
                      </expression>
                      <symbol> ) </symbol>
                    </term>
                    <symbol> | </symbol>
                    <term>
                      <symbol> ( </symbol>
                      <expression>
                        <term>
                          <identifier> batRight </identifier>
                          <Attribute> VarKind: var, type: int, index: 2 </Attribute>
                        </term>
                        <symbol> &lt; </symbol>
                        <term>
                          <identifier> ballLeft </identifier>
                          <Attribute> VarKind: var, type: int, index: 3 </Attribute>
                        </term>
                      </expression>
                      <symbol> ) </symbol>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
                <ifStatement>
                  <keyword> if </keyword>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <symbol> ~ </symbol>
                      <term>
                        <identifier> exit </identifier>
                        <Attribute> VarKind: field, type: boolean, index: 3 </Attribute>
                      </term>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                  <symbol> { </symbol>
                  <statements>
                    <ifStatement>
                      <keyword> if </keyword>
                      <symbol> ( </symbol>
                      <expression>
                        <term>
                          <identifier> ballRight </identifier>
                          <Attribute> VarKind: var, type: int, index: 4 </Attribute>
                        </term>
                        <symbol> &lt; </symbol>
                        <term>
                          <symbol> ( </symbol>
                          <expression>
                            <term>
                              <identifier> batLeft </identifier>
                              <Attribute> VarKind: var, type: int, index: 1 </Attribute>
                            </term>
                            <symbol> + </symbol>
                            <term>
                              <integerConstant> 10 </integerConstant>
                            </term>
                          </expression>
                          <symbol> ) </symbol>
                        </term>
                      </expression>
                      <symbol> ) </symbol>
                      <symbol> { </symbol>
                      <statements>
                        <letStatement>
                          <keyword> let </keyword>
                          <identifier> bouncingDirection </identifier>
                          <Attribute> VarKind: var, type: int, index: 0 </Attribute>
                          <symbol> = </symbol>
                          <expression>
                            <term>
                              <symbol> - </symbol>
                              <term>
                                <integerConstant> 1 </integerConstant>
                              </term>
                            </term>
                          </expression>
                          <symbol> ; </symbol>
                        </letStatement>
                      </statements>
                      <symbol> } </symbol>
                      <keyword> else </keyword>
                      <symbol> { </symbol>
                      <statements>
                        <ifStatement>
                          <keyword> if </keyword>
                          <symbol> ( </symbol>
                          <expression>
                            <term>
                              <identifier> ballLeft </identifier>
                              <Attribute> VarKind: var, type: int, index: 3 </Attribute>
                            </term>
                            <symbol> &gt; </symbol>
                            <term>
                              <symbol> ( </symbol>
                              <expression>
                                <term>
                                  <identifier> batRight </identifier>
                                  <Attribute> VarKind: var, type: int, index: 2 </Attribute>
                                </term>
                                <symbol> - </symbol>
                                <term>
                                  <integerConstant> 10 </integerConstant>
                                </term>
                              </expression>
                              <symbol> ) </symbol>
                            </term>
                          </expression>
                          <symbol> ) </symbol>
                          <symbol> { </symbol>
                          <statements>
                            <letStatement>
                              <keyword> let </keyword>
                              <identifier> bouncingDirection </identifier>
                              <Attribute> VarKind: var, type: int, index: 0 </Attribute>
                              <symbol> = </symbol>
                              <expression>
                                <term>
                                  <integerConstant> 1 </integerConstant>
                                </term>
                              </expression>
                              <symbol> ; </symbol>
                            </letStatement>
                          </statements>
                          <symbol> } </symbol>
                        </ifStatement>
                      </statements>
                      <symbol> } </symbol>
                    </ifStatement>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier> batWidth </identifier>
                      <Attribute> VarKind: field, type: int, index: 6 </Attribute>
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <identifier> batWidth </identifier>
                          <Attribute> VarKind: field, type: int, index: 6 </Attribute>
                        </term>
                        <symbol> - </symbol>
                        <term>
                          <integerConstant> 2 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                    <doStatement>
                      <keyword> do </keyword>
                      <identifier> bat </identifier>
                      <Attribute> VarKind: field, type: Bat, index: 0 </Attribute>
                      <symbol> . </symbol>
                      <identifier> setWidth </identifier>
                      <Attribute> VarKind: subroutine </Attribute>
                      <symbol> ( </symbol>
                      <expressionList>
                        <expression>
                          <term>
                            <identifier> batWidth </identifier>
                            <Attribute> VarKind: field, type: int, index: 6 </Attribute>
                          </term>
                        </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                      <symbol> ; </symbol>
                    </doStatement>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier> score </identifier>
                      <Attribute> VarKind: field, type: int, index: 4 </Attribute>
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <identifier> score </identifier>
                          <Attribute> VarKind: field, type: int, index: 4 </Attribute>
                        </term>
                        <symbol> + </symbol>
                        <term>
                          <integerConstant> 1 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                    <doStatement>
                      <keyword> do </keyword>
                      <identifier> Output </identifier>
                      <Attribute> VarKind: class </Attribute>
                      <symbol> . </symbol>
                      <identifier> moveCursor </identifier>
                      <Attribute> VarKind: subroutine </Attribute>
                      <symbol> ( </symbol>
                      <expressionList>
                        <expression>
                          <term>
                            <integerConstant> 22 </integerConstant>
                          </term>
                        </expression>
                        <symbol> , </symbol>
                        <expression>
                          <term>
                            <integerConstant> 7 </integerConstant>
                          </term>
                        </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                      <symbol> ; </symbol>
                    </doStatement>
                    <doStatement>
                      <keyword> do </keyword>
                      <identifier> Output </identifier>
                      <Attribute> VarKind: class </Attribute>
                      <symbol> . </symbol>
                      <identifier> printInt </identifier>
                      <Attribute> VarKind: subroutine </Attribute>
                      <symbol> ( </symbol>
                      <expressionList>
                        <expression>
                          <term>
                            <identifier> score </identifier>
                            <Attribute> VarKind: field, type: int, index: 4 </Attribute>
                          </term>
                        </expression>
                      </expressionList>
                      <symbol> ) </symbol>
                      <symbol> ; </symbol>
                    </doStatement>
                  </statements>
                  <symbol> } </symbol>
                </ifStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier> ball </identifier>
              <Attribute> VarKind: field, type: Ball, index: 1 </Attribute>
              <symbol> . </symbol>
              <identifier> bounce </identifier>
              <Attribute> VarKind: subroutine </Attribute>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier> bouncingDirection </identifier>
                    <Attribute> VarKind: var, type: int, index: 0 </Attribute>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <symbol> } </symbol>
</class>
