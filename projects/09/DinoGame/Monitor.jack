/** Implements a Monitor Object. */

class Monitor {

    /** Constructs a new monitor. */
    constructor Monitor new() {
        return this;
    }
 
    /** Disposes this monitor. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    method void displaySuccess() {
        do Output.moveCursor(16/2, 32/2-7/2);
        do Output.printString("Success");
        return;
    }

    method void displayFail() {
        do Output.moveCursor(16/2, 32/2-4/2);
        do Output.printString("Fail");
        return;
    }

    method void clearDino(int x, int y) {
        var int memAddress;
        let memAddress = 16384+x+32*y;
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 0);
        do Memory.poke(memAddress+96, 0);
        do Memory.poke(memAddress+128, 0);
        do Memory.poke(memAddress+160, 0);
        do Memory.poke(memAddress+192, 0);
        do Memory.poke(memAddress+224, 0);
        do Memory.poke(memAddress+256, 0);
        do Memory.poke(memAddress+288, 0);
        do Memory.poke(memAddress+320, 0);
        do Memory.poke(memAddress+352, 0);
        do Memory.poke(memAddress+384, 0);
        do Memory.poke(memAddress+416, 0);
        do Memory.poke(memAddress+448, 0);
        do Memory.poke(memAddress+480, 0);
        return;
    }

    method void displayDino(int x, int y) {
        var int memAddress;
        let memAddress = 16384+x+32*y;
        do Memory.poke(memAddress+0, 3840);
        do Memory.poke(memAddress+32, 8064);
        do Memory.poke(memAddress+64, 7552);
        do Memory.poke(memAddress+96, 32640);
        do Memory.poke(memAddress+128, 32640);
        do Memory.poke(memAddress+160, 3969);
        do Memory.poke(memAddress+192, 3969);
        do Memory.poke(memAddress+224, 32707);
        do Memory.poke(memAddress+256, 20455);
        do Memory.poke(memAddress+288, 4095);
        do Memory.poke(memAddress+320, 4094);
        do Memory.poke(memAddress+352, 4092);
        do Memory.poke(memAddress+384, 4088);
        do Memory.poke(memAddress+416, 2032);
        do Memory.poke(memAddress+448, 544);
        do Memory.poke(memAddress+480, 1632);
        return;
    }

    method void clearTerrain(int x, int y) {
        var int memAddress;
        let memAddress = 16384+x+32*y;
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 0);
        do Memory.poke(memAddress+96, 0);
        do Memory.poke(memAddress+128, 0);
        do Memory.poke(memAddress+160, 0);
        do Memory.poke(memAddress+192, 0);
        do Memory.poke(memAddress+224, 0);
        do Memory.poke(memAddress+256, 0);
        do Memory.poke(memAddress+288, 0);
        do Memory.poke(memAddress+320, 0);
        do Memory.poke(memAddress+352, 0);
        do Memory.poke(memAddress+384, 0);
        do Memory.poke(memAddress+416, 0);
        do Memory.poke(memAddress+448, 0);
        do Memory.poke(memAddress+480, 0);
        return;
    }

    method void displayTerrian(int x, int y) {
        var int memAddress;
        let memAddress = 16384+x+32*y;
        do Memory.poke(memAddress+0, 384);
        do Memory.poke(memAddress+32, 960);
        do Memory.poke(memAddress+64, 4080);
        do Memory.poke(memAddress+96, 15804);
        do Memory.poke(memAddress+128, -1);
        do Memory.poke(memAddress+160, -577);
        do Memory.poke(memAddress+192, 32382);
        do Memory.poke(memAddress+224, 16380);
        do Memory.poke(memAddress+256, 384);
        do Memory.poke(memAddress+288, 3470);
        do Memory.poke(memAddress+320, 1944);
        do Memory.poke(memAddress+352, 432);
        do Memory.poke(memAddress+384, 480);
        do Memory.poke(memAddress+416, 384);
        do Memory.poke(memAddress+448, 384);
        do Memory.poke(memAddress+480, 384);
        return;
    }
}
 