// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Decoder(in=instruction, aOrC=aOrC, aOrM=aOrM, ctrl=ctrl, dest[2]=writeA, dest[1]=writeD, dest[0]=writeM, jump=jump);

    // set A-Register
    Mux16(a[0..14]=instruction[0..14], a[15]=false, b=ALUResult, sel=aOrC, out=inA);
    Register(in=inA, load=writeA, out=outA, out[0..14]=addressM);

    // set D-Register
    Register(in=ALUResult, load=writeD, out=outD);

    // set ALU
    Mux16(a=outA, b=inM, sel=aOrM, out=outAorM);
    ALU(x=outD, y=outAorM, zx=ctrl[5], nx=ctrl[4], zy=ctrl[3], ny=ctrl[2], f=ctrl[1], no=ctrl[0], out=ALUResult, out=outM, zr=isZr, ng=isNg);

    // set jump condition
    And(a=isNg, b=jump[2], out=j1);
    And(a=isZr, b=jump[1], out=j2);
    Not(in=isNg, out=notIsNg);
    And(a=notIsNg, b=jump[0], out=j3);
    Or(a=j1, b=j2, out=j4);
    Or(a=j4, b=j3, out=isJump);

    // set Program Counter
    PC(in=outA, load=isJump, inc=true, reset=reset, out[0..14]=pc);
}